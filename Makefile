SHELL := /bin/bash

# ---------- Fetch Ciqual and Calnut tables. ----------

# This file is not used anymore, the full ANSES-CIQUAL 2020 Table in xml format is used instead.
# CIQUAL_CSV := data/ciqual2020.csv
# CIQUAL_URL := https://raw.githubusercontent.com/openfoodfacts/openfoodfacts-server/main/external-data/ciqual/ciqual/CIQUAL2020_ENG_2020_07_07.csv
# $(CIQUAL_CSV):
# 	wget -O $(CIQUAL_CSV) $(CIQUAL_URL)

CIQUAL_XML_ZIP := data/XML_2020_07_07.zip
CIQUAL_XML_URL := https://ciqual.anses.fr/cms/sites/default/files/inline-files/XML_2020_07_07.zip
$(CIQUAL_XML_ZIP):
	wget -O $(CIQUAL_XML_ZIP) $(CIQUAL_XML_URL)

CALNUT_0_CSV := data/calnut.0.csv
CALNUT_0_URL := https://github.com/openfoodfacts/openfoodfacts-server/raw/refs/heads/main/external-data/ciqual/calnut/CALNUT.csv.0
$(CALNUT_0_CSV):
	wget -O $(CALNUT_0_CSV) $(CALNUT_0_URL)

CALNUT_1_CSV := data/calnut.1.csv
CALNUT_1_URL := https://github.com/openfoodfacts/openfoodfacts-server/raw/refs/heads/main/external-data/ciqual/calnut/CALNUT.csv.1
$(CALNUT_1_CSV):
	wget -O $(CALNUT_1_CSV) $(CALNUT_1_URL)

# ---------- Fetch the nutrient map from recipe estimator map. ----------

NUTRIENT_MAP_RE := data/nutrient_map_recipe_estimator.csv
NUTRIENT_MAP_RE_URL := https://raw.githubusercontent.com/openfoodfacts/recipe-estimator/main/ciqual/nutrient_map.csv
$(NUTRIENT_MAP_RE):
	wget -O $(NUTRIENT_MAP_RE) $(NUTRIENT_MAP_RE_URL)

nutrient-map-reformat: $(NUTRIENT_MAP_RE)
	./scripts/nutrient_map/nutrient_map_reformat.py

nutrient-map-update-counts:
	./scripts/nutrient_map/nutrient_map_update_counts.py

nutrient-map-update-ciqual:
	./scripts/nutrient_map/nutrient_map_update_ciqual.py

# ---------- Fetch the prices parquet file and the products jsonl file. ----------

PRICES_PARQUET := data/prices.parquet
PRICES_PARQUET_URL := https://huggingface.co/datasets/openfoodfacts/open-prices/resolve/main/prices.parquet
$(PRICES_PARQUET):
	wget -O $(PRICES_PARQUET) $(PRICES_PARQUET_URL)

PRODUCTS_PARQUET := data/products.parquet
PRODUCTS_PARQUET_URL := https://huggingface.co/datasets/openfoodfacts/product-database/resolve/main/food.parquet
$(PRODUCTS_PARQUET):
	wget -O $(PRODUCTS_PARQUET) $(PRODUCTS_PARQUET_URL)

PRODUCT_JSONL_GZ := data/openfoodfacts-products.jsonl.gz
PRODUCT_JSONL_GZ_URL := https://static.openfoodfacts.org/data/openfoodfacts-products.jsonl.gz
$(PRODUCT_JSONL_GZ):
	wget -O $(PRODUCT_JSONL_GZ) $(PRODUCT_JSONL_GZ_URL)

# ---------- Fetch all. ----------

fetch-all: $(CIQUAL_XML_ZIP) $(CALNUT_0_CSV) $(CALNUT_1_CSV) $(NUTRIENT_MAP_RE) $(PRICES_PARQUET) $(PRODUCT_JSONL_GZ)

# ---------- Unzip and convert the Ciqual data to csv. ----------

CIQUAL_DIR := data/ciqual2020
unzip_and_process_ciqual: $(CIQUAL_XML_ZIP)
	[ -d $(CIQUAL_DIR) ] && rm -r $(CIQUAL_DIR) || true
	unzip -o $(CIQUAL_XML_ZIP) -d $(CIQUAL_DIR)
	./scripts/xml_to_csv.py $(CIQUAL_DIR)/alim_2020_07_07.xml $(CIQUAL_DIR)/alim.csv
	./scripts/xml_to_csv.py $(CIQUAL_DIR)/alim_grp_2020_07_07.xml $(CIQUAL_DIR)/alim_grp.csv
	./scripts/xml_to_csv.py $(CIQUAL_DIR)/compo_2020_07_07.xml $(CIQUAL_DIR)/compo.csv
	./scripts/xml_to_csv.py $(CIQUAL_DIR)/sources_2020_07_07.xml $(CIQUAL_DIR)/sources.csv
	./scripts/xml_to_csv.py $(CIQUAL_DIR)/const_2020_07_07.xml $(CIQUAL_DIR)/const.csv

# ---------- Fetch, extract and summarize the Recommendations from the Nordic Nutrition Recommendations 2023. ----------
# recommendations_nnr2023.csv is tracked in git but can be regenerated by deleting the file and running
# make data/recommendations_nnr2023.csv

NNR_HTML := data/recommendations_nnr2023.html
NNR_EXTRACTED_TABLES := data/recommendations_nnr2023/*.csv
NNR_SUMMARY_CSV := data/recommendations_nnr2023.csv
# Original URL: https://pub.norden.org/nord2023-003/recommendations.html
# Snapshot 29 July 2024:
NNR_HTML_URL := https://web.archive.org/web/20240729193940/https://pub.norden.org/nord2023-003/recommendations.html

$(NNR_HTML):
	wget -O $(NNR_HTML) $(NNR_HTML_URL)

$(NNR_EXTRACTED_TABLES): $(NNR_HTML)
	./scripts/recommendations_nnr2023/recommendations_extract_tables.py

$(NNR_SUMMARY_CSV): $(NNR_EXTRACTED_TABLES)
	./scripts/recommendations_nnr2023/recommendations_summarize_general.py

# ---------- Load the data into the database. ----------

load: $(CALNUT_0_CSV) $(CALNUT_1_CSV) $(PRICES_PARQUET) $(PRODUCT_JSONL_GZ)
	duckdb data/data.db < ./dietdashboard/queries/load.sql

process:
	duckdb data/data.db < ./dietdashboard/queries/process.sql

drop:
	duckdb data/data.db < ./dietdashboard/queries/drop.sql

# ---------- Run the optmization dashboard. ----------

opt:
	./dietdashboard/app.py

run-gunicorn:
	nohup uv run gunicorn -w 4 -b 0.0.0.0:8000 dietdashboard.app:app >> gunicorn.log 2>&1 &

list-gunicorn:
	pgrep -af "dietdashboard.app:app"

kill-gunicorn:
	pkill -f "dietdashboard.app:app"

# ---------- Frontend utilities. ----------

frontend-install:
	cd dietdashboard/frontend && pnpm install

frontend-bundle:
	cd dietdashboard/frontend && ./bundle.sh

frontend-watch:
	cd dietdashboard/frontend && ./bundle.sh watch

# https://x.com/karpathy/status/1915581920022585597
# pipe this into clipboard
frontend-copy:
	uv run files-to-prompt dietdashboard/frontend \
	-e js -e css -e html \
	--ignore node_modules --ignore d3.js \
	--cxml

# ---------- Create the nutrient extraction template. ----------

template-nutriments:
	./scripts/template_nutriments_query.py

template-main:
	duckdb data/data.db "SELECT id FROM nutrient_map WHERE calnut_const_code IS NOT NULL" -csv -noheader | sed "s/$$/_value,/"
